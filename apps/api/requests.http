# Pick your baseUrl here:
@baseUrl = http://localhost:3002
#@baseUrl = https://api.firecrawl.dev

### Scrape Website
# @name scrape
POST {{baseUrl}}/v1/scrape HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url":"https://firecrawl.dev"
}


### Crawl Website
# @name crawl
POST {{baseUrl}}/v1/crawl HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "https://firecrawl.dev"
}

### Check Crawl Status
@crawlId = {{crawl.response.body.$.id}}
# @name crawlStatus
GET {{baseUrl}}/v1/crawl/{{crawlId}} HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}

### Cancel Crawl
@crawlId = {{crawl.response.body.$.id}}
# @name cancelCrawl
DELETE {{baseUrl}}/v1/crawl/{{crawlId}} HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}

### Batch Scrape Websites
# @name batchScrape
POST {{baseUrl}}/v1/batch/scrape HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "urls": [
    "firecrawl.dev",
    "mendable.ai"
  ]
}

### Check Batch Scrape Status
@batchScrapeId = {{batchScrape.response.body.$.id}}
# @name batchScrapeStatus
GET {{baseUrl}}/v1/crawl/{{batchScrapeId}} HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}


### Map Website
# @name map
POST {{baseUrl}}/v1/map HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "firecrawl.dev",
  "sitemapOnly": true
}

### Extract Firecrawl Title
# @name extractFirecrawl
POST {{baseUrl}}/v1/extract HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "urls": [
    "https://firecrawl.dev/blog"
  ],
  "origin": "api-sdk",
  "prompt": "Extract all the blog titles from the page, is multity entity = true",
  "schema": {
    "type": "object",
    "properties": {
      "blog_titles": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    "required": ["blog_titles"]
  }
}

###
@extractFirecrawlId = {{extractFirecrawl.response.body.$.id}}
# @name extractFirecrawlStatus 
GET {{baseUrl}}/v1/extract/{{extractFirecrawlId}} HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}

###
DELETE {{baseUrl}}/v1/crawl/c94136f9-86c1-4a97-966c-1c8e0274778f HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}

### Generate LLMs TXT
# @name generateLlmsTxt
POST {{baseUrl}}/v1/llmstxt HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "https://firecrawl.dev",
  "maxUrls": 1,
  "showFullText": false
}


### Check Generate LLMs TXT Status
@generateLlmsTxtId = {{generateLlmsTxt.response.body.$.id}}
# @name generateLlmsTxtStatus
GET {{baseUrl}}/v1/llmstxt/{{generateLlmsTxtId}} HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}

### Scrape with JSON Schema Extraction
# @name scrapeWithSchema
POST {{baseUrl}}/v1/scrape HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "https://firecrawl.dev",
  "formats": ["json"],
  "jsonOptions": {
    "schema": {
      "type": "object",
      "properties": {
        "description": { 
          "type": "string",
          "description": "Describe the site"
        },
        "respect_robots_txt": {
          "type": ["boolean","null"],
          "description": "Does firecrawl respect the robots.txt files?"
        }
      },
      "required": ["description", "respect_robots_txt"]
    }
    // "systemPrompt": "You are an expert web scraper." // Optional system prompt
  }
}


### Scrape with JSON Schema Extraction
# @name scrapeWithSchema
POST {{baseUrl}}/v1/scrape HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "https://firecrawl.dev",
  "formats": ["json"],
  "jsonOptions": {
    "schema": {
      "type": "object",
      "properties": {
        "description": { 
          "type": "string",
          "description": "Describe the site"
        }

      },
      "required": ["description" ]
    }
    // "systemPrompt": "You are an expert web scraper." // Optional system prompt
  }
}

### Scrape to Extract Array of Titles
# @name scrapeItemsArray
POST {{baseUrl}}/v1/scrape HTTP/1.1
Authorization: Bearer {{$dotenv TEST_API_KEY}}
content-type: application/json

{
  "url": "https://firecrawl-e2e-test-git-main-rafaelsideguides-projects.vercel.app/load-more/with-params",
    "formats": ["json"],
  "jsonOptions": {
    "prompt": "Extract all the main article or blog post titles from the page into an array.",
    "schema": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "description": "An array containing the extracted items.",
          "items": { 
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of a single article or blog post."
              }
            },
            "required": ["title"] 
          }
        }
      },
      "required": ["items"] 
    }
    // "systemPrompt": "You are an expert structured data extractor." 
  }
}